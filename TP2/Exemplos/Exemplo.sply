import os


%%YACC


%%end 

pass


%%LEX

%literals = "+-*/()=;"

%ignore = " \n\t\r"
%contexts = (("banana",'inclusive'),("laranja",'exclusive'))


#Tokens
INT (banana) = r'\d+' %INT %begin laranja          
ID laranja = r'[a-zA-Z_]\w*'                    
Print = r'(print|PRINT)' %begin banana    
Print (banana) = r'(print|PRINT)' %begin INITIAL 
Read = r'(read|READ)'
DUMP = r'(dump|DUMP)'

%error = "Mensagem de erro" %skip
%error (laranja) = %noskip




%%YACC



%precedence = (("left","+"),("left","-"))

#declarar variavies...? #temos que fazer "parser.ola = 0"
ola = "ola"
val = 90
tabelaIDs = %newdict
lista = [   ]


#distingue-se SNT: palavaras minusculas 
#simbolos literais podemos tentar fazer sem ' '

prog : "comandos"
comandos (empty) :  
comandos rec : "comandos comando ;"
comando : "ID = exp" 
{p.parser.tabelaIDs[p[1]] = p[3]}

comando : "Print exp"     
{print(p[2])}

comando (Read): "Read exp" {
r = int(input())
p.parser.tabelaIDs[p[2]] = r



print("lol")
}

comando : "DUMP"          
{print(p.parser.tabelaIDs)}

exp : "aexp"
{p[0] = p[1]}

aexp : "termo"            
{p[0] = p[1]}

aexp : "aexp '+' termo"     
{p[0] = p[1] + p[3]}

aexp : "aexp - termo"     
{p[0] = p[1] - p[3]}

termo (fator) : "fator"           
{p[0] = p[1]}

termo (mul) : "termo * INT"     
{p[0] = p[1] * p[3]}

termo (div) : "termo / INT"     
{p[0] = p[1] / p[3]}

fator : "INT"             
{p[0] = p[1]}

fator : "ID"              
{getVar(p)}

fator : "( exp )"         
{p[0] = p[2]}

%error = %skip

%%end

def getVar(p):
    if p[1] in p.parser.tabelaIDs:
        p[0] = p.parser.tabelaIDs[p[1]]
    else:
        print("Variável '"+str(p[1])+"' não definida.\nInicializada a 0")
        p[0] = 0