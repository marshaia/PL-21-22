iahkshdjkashkjdaskd
dasjhdkasjhdkja
dsjahdkjashdka


%%YACC
"lol gotcha"

%%LEX
%ignore = " \n\t\r"
%literals = "+-*/()=;"


#Tokens sempre em maiusculas (por causa do yacc em baixo)
INT = (r'\d+',int)           #float,double,str
ID = (r'[a-zA-Z_]\w*')       #default str né
Print = (r'(print|PRINT)')      
Read = (r'(read|READ)')
DUMP = (r'(dump|DUMP)')
%tokenEnd

%error = ("Mensagem de erro",skip)

# se não escrito def t_error predefindo como:
#
# def t_error(t):
#     print("Illegal Character:",t.value[0])
#     t.lexer.skip

%%YACC

#fuck precedencia, all my homies hate precedencia

%precedence = (("left","+"),("left","-"))

#declarar variavies...? #temos que fazer "parser.ola = 0"
ola = "ola"
val = 1
tabelaIDs = {}
lista = [   ]


#distingue-se SNT: palavaras minusculas 
#simbolos literais podemos tentar fazer sem ' '

prog : comandos
comandos : $empty 
comandos : comandos comando ;
comando : ID = exp      
{p.parser.tabelaIDs[p[1]] = p[3]}

comando : PRINT exp     
{print(p[2])}

comando : READ exp 
{r = int(input());p.parser.tabelaIDs[p[2]] = r}

comando : DUMP          
{print(p.parser.tabelaIDs)}

exp : aexp
{p[0] = p[1]}

aexp : termo            
{p[0] = p[1]}

aexp : aexp + termo     
{p[0] = p[1] + p[3]}

aexp : aexp - termo     
{p[0] = p[1] - p[3]}

termo : fator           
{p[0] = p[1]}

termo : termo * INT     
{p[0] = p[1] * p[3]}

termo : termo / INT     
{p[0] = p[1] / p[3]}

fator : INT             
{p[0] = p[1]}

fator : ID              
{getVar()}

fator : ( exp )         
{p[0] = p[2]}

%error = ("Mensagem",noskip)

%%

def getVar():
    if p[1] in p.parser.tabelaIDs:
        p[0] = p.parser.tabelaIDs[p[1]]
    else:
        print("Variável '"+str(p[1])+"' não definida.\nInicializada a 0")
        p[0] = 0