%%LEX
%ignore = " \n\t\r"
%literals = "+-*/()=;"


#Tokens sempre em maiusculas (por causa do yacc em baixo)
INT = (r'\d+',int)           #float,double,str
ID = (r'[a-zA-Z_]\w*')       #default str né
PRINT = (r'(print|PRINT)')      
READ = (r'(read|READ)')
DUMP = (r'(dump|DUMP)')

%error = ("Mensagem de erro",t.lexer.skip)

#se não escrito def t_error predefindo como:
#
# def t_error(t):
#     print("Illegal Character:",t.value[0])
#     t.lexer.skip

%% #Pode ou não terminar com %%


#Pode ter texto aqui mas tem de ser ignorado




%%YACC

#fuck precedencia, all my homies hate precedencia


#declarar variavies...? #temos que fazer "parser.ola = 0"
ola = 0
tabelaIDs = {}


#distingue-se SNT: palavaras minusculas 
#simbolos literais podemos tentar fazer sem ' '

prog : comandos
comandos : 
comandos : comandos comando ';'
comando : ID = exp      {p.parser.tabelaIDs[p[1]] = p[3]}
comando : PRINT exp     {print(p[2])}
comando : READ exp      {r = int(input());p.parser.tabelaIDs[p[2]] = r}
comando : DUMP          {print(p.parser.tabelaIDs)}

exp : aexp              {p[0] = p[1]}
aexp : termo            {p[0] = p[1]}
aexp : aexp + termo     {p[0] = p[1] + p[3]}
aexp : aexp - termo     {p[0] = p[1] - p[3]}
termo : fator           {p[0] = p[1]}
termo : termo * INT     {p[0] = p[1] * p[3]}
termo : termo / INT     {p[0] = p[1] / p[3]}
fator : INT             {p[0] = p[1]}
fator : ID              {getVar()}
fator : ( exp )         {p[0] = p[2]}

%error = ("Mensagem",exit())

%%

def getVar():
    if p[1] in p.parser.tabelaIDs:
        p[0] = p.parser.tabelaIDs[p[1]]
    else:
        print("Variável '"+str(p[1])+"' não definida.\nInicializada a 0")
        p[0] = 0




-------------------END---------------------

prog: contexto

contexto: lex
        | yacc

lex: lexParametros

lexParametros : 
              | lexParametros lexParametro

lexParametro : lexToken
             | lexRegra

lexToken : TOKENID '=' '(' ER lexTokenOp

lexTokenOp : ')'
           | ',' tokenFunc ')'

tokenFunc : FSTR
          | FINT
          | FFLOAT
          | FDOUBLE


lexRegra : lexIgnore
         | lexLiterals
         | lexError

lexIgnore : LEXIGNORE '=' STRING

lexLiterals : LEXLITERALS '=' STRING

lexError : LEXERROR '=' '(' STRING lexErrorOP

lexErrorOP : ')'
           | ',' code ')'

code : instructions

instructions : INSTRUCTION
             | instructions ';' INSTRUCTION




yacc: yaccParametros

yaccParametros : 
               | yaccParametros yaccParametro

yaccParametro : yaccVar
              | yaccRegra
              | yaccGram

#later xd